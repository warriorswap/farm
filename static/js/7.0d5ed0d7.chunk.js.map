{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","console","error","fetchData","useGetStats","tvl","toLocaleString","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","variant","justifyContent","exact","activeClassName","to","mt","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance"],"mappings":"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","file":"static/js/7.0d5ed0d7.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {/* <CardBusdValue value={earningsBusd} /> */}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {/* <CardBusdValue value={busdBalance} /> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'VICTORY to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'VICTORY in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting VICTORY')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'VICTORY Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total VICTORY Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total VICTORY Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New VICTORY/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(762, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\r\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all internal and external LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Skeleton height={66} />\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/* eslint-disable camelcase */\r\nexport interface DeBankTvlResponse {\r\n  id: string\r\n  chain: string\r\n  name: string\r\n  site_url: string\r\n  logo_url: string\r\n  has_supported_portfolio: boolean\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\r\n        const responseData: DeBankTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}","import React, { useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n\r\n    calculateAPY(activeFarms)\r\n\r\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n\r\n      farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\r\n\r\n        return apy\r\n      })\r\n    },\r\n    [bnbPrice, farmsLP],\r\n  )\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#cca93d\">\r\n          {getHighestAPY() ? (\r\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  // background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: left top, right top;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 136px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'Warrior Swap')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'The #1 Decentralized Exchange for Warriors.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <EarnAPYCard />\r\n          {/* <EarnAssetCard /> */}\r\n          {/* <LotteryCard /> */}\r\n        </Cards>\r\n        <CTACards>\r\n          {/* <EarnAPYCard /> */}\r\n          {/* <WinCard /> */}\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"],"sourceRoot":""}